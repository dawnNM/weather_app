{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","InputForm","className","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Weather","city","country","humidity","description","temperature","icon","src","height","width","error","API_KEY","WeatherFinalExam","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICXAC,E,iLAEE,OACI,yBAAKC,UAAU,aACf,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,kCACI,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,eAAeK,KAAM,OAAOC,KAAK,OAAOC,YAAY,kCAC/F,yBAAKP,UAAU,YAAW,4BAAQA,UAAU,mBAAkB,0BAAMA,UAAU,+BAApD,yB,GAR1BQ,IAAMC,WAiBxBC,E,iLAEE,OACI,6BACI,kCACSR,KAAKC,MAAMQ,MAAQT,KAAKC,MAAMS,SAAW,yCAAeV,KAAKC,MAAMQ,KAA1B,KAAoCT,KAAKC,MAAMS,SACxFV,KAAKC,MAAMU,UAAY,wCAAeX,KAAKC,MAAMU,UACjDX,KAAKC,MAAMW,aAAe,0CAAiBZ,KAAKC,MAAMW,aACtDZ,KAAKC,MAAMY,aAAe,2CAAkBb,KAAKC,MAAMY,YAA7B,gBAC1Bb,KAAKC,MAAMa,MAAQ,2BAAG,yBAAKC,IAAM,oCAAqCf,KAAKC,MAAMa,KAAM,OAAQE,OAAO,KAAKC,MAAM,OAA9F,KACnBjB,KAAKC,MAAMiB,OAAS,2BAAIlB,KAAKC,MAAMiB,a,GAVtCZ,IAAMC,WAiBtBY,EAAU,mCAEVC,E,2MACFC,MAAQ,CACJR,iBAAaS,EACbb,UAAMa,EACNZ,aAASY,EACTX,cAAUW,EACVV,iBAAaU,EACbR,UAAMQ,EACNJ,WAAOI,G,EAGXpB,WAAa,SAAOqB,GAAP,mBAAAC,EAAAC,OAAA,uDACTF,EAAEG,iBACIjB,EAAOc,EAAEI,OAAOC,SAASnB,KAAKoB,MAF3B,WAAAL,EAAA,MAGcM,MAAM,qDAAD,OAAsDrB,EAAtD,kBAAoEU,EAApE,mBAHnB,cAGHY,EAHG,kBAAAP,EAAA,MAKUO,EAASC,QALnB,OAKHC,EALG,OAMNxB,GACCyB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVvB,YAAaoB,EAAKI,KAAKC,KACvB7B,KAAMwB,EAAK7B,KACXM,QAASuB,EAAKM,IAAI7B,QAClBC,SAASsB,EAAKI,KAAK1B,SACnBC,YAAYqB,EAAKO,QAAQ,GAAG5B,YAC5BE,KAAKmB,EAAKO,QAAQ,GAAG1B,KACrBI,MAAM,MAGV,EAAKkB,SAAS,CACVvB,iBAAaS,EACbb,UAAMa,EACNZ,aAASY,EACTX,cAASW,EACTV,iBAAYU,EACZR,UAAMQ,EACNJ,MAAM,6BAzBL,sC,wEA+BT,OACI,6BACI,wBAAIpB,UAAU,eAAd,8CAA2E,6BAC3E,wBAAIA,UAAU,eAAd,kDACA,kBAAC,EAAD,CAAWI,WAAYF,KAAKE,aAC5B,kBAAC,EAAD,CACAW,YAAab,KAAKqB,MAAMR,YACxBJ,KAAMT,KAAKqB,MAAMZ,KACjBC,QAASV,KAAKqB,MAAMX,QACpBC,SAAUX,KAAKqB,MAAMV,SACrBC,YAAaZ,KAAKqB,MAAMT,YACxBE,KAAMd,KAAKqB,MAAMP,KACjBI,MAAOlB,KAAKqB,MAAMH,a,GAtDHZ,IAAMC,WA6DrCkC,IAASC,OAAO,kBAAC,EAAD,MAAqBC,SAASC,eAAe,SD2BvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e30a4363.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass InputForm extends React.Component {\n    render(){\n        return (\n            <div className=\"container\">\n            <form onSubmit={this.props.getWeather}>\n                <fieldset>\n                    <div className=\"row\">\n                        <div className=\"col-md-8\"><input className=\"form-control\" type =\"text\" name=\"city\" placeholder=\"City...or....City,Country...\"/></div>\n                        <div className=\"col-md-2\"><button className=\"btn btn-default\"><span className=\"glyphicon glyphicon-search\"></span> Get Weather</button></div>\n                    </div>\n                </fieldset>\n            </form>\n            </div>\n        );\n    }\n};\n\nclass Weather extends React.Component{\n    render(){\n        return(\n            <div>\n                <fieldset>\n                        {this.props.city && this.props.country && <p>Location:  {this.props.city }, { this.props.country }</p>}\n                        {this.props.humidity && <p>Humidity: { this.props.humidity }</p>}\n                        {this.props.description && <p>Conditions: { this.props.description }</p>}\n                        {this.props.temperature && <p>Temperature: { this.props.temperature }Â° Celsius</p>}\n                        {this.props.icon && <p><img src={ \"http://openweathermap.org/img/wn/\"+ this.props.icon +\".png\"} height=\"42\" width=\"42\"/> </p>}\n                        {this.props.error && <p>{this.props.error}</p>}\n                </fieldset>\n            </div>\n        );\n    }\n};\n\nconst API_KEY = \"25a6bb0371d24d3819a0a03b08ae5430\";\n\nclass WeatherFinalExam extends React.Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        icon: undefined,\n        error: undefined\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\n        //convert response to json\n        const data = await api_call.json();\n        if(city){\n            console.log(data);\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity:data.main.humidity,\n                description:data.weather[0].description,\n                icon:data.weather[0].icon,\n                error:\"\"\n            });\n        } else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity:undefined,\n                description:undefined,\n                icon: undefined,\n                error:\"Please enter the values.\"\n            });\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <h1 className=\"aligncenter\">React Weather App using openweathermap.org</h1><br/>\n                <h3 className=\"aligncenter\">Example input format : montreal or montreal,ca</h3>\n                <InputForm getWeather={this.getWeather}/>\n                <Weather\n                temperature={this.state.temperature}\n                city={this.state.city}\n                country={this.state.country}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                icon={this.state.icon}\n                error={this.state.error}\n                />\n            </div>\n        );\n    }\n};\n\nReactDOM.render(<WeatherFinalExam />,document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}